{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText14",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText15",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PO_ID as string,",
				"          P_ID as string,",
				"          Availability as string,",
				"          Number_of_products_sold as string,",
				"          Revenue_generated as string,",
				"          Stock_levels as string,",
				"          Lead_times as string,",
				"          Order_quantities as string,",
				"          Shipping_times as string,",
				"          Shipping_carriers as string,",
				"          Shipping_costs as string,",
				"          Supplier_Id as string,",
				"          Lead_time as string,",
				"          Production_volumes as string,",
				"          Manufacturing_lead_time as string,",
				"          Manufacturing_costs as string,",
				"          Inspection_results as string,",
				"          Defect_rates as string,",
				"          Transportation_id as string,",
				"          Costs as string,",
				"          route_id as string,",
				"          LastUpdateDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 aggregate(groupBy(PO_ID),",
				"     TotalRevenue = sum(toInteger(Revenue_generated)),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}