{
	"name": "df_AssertRow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText11",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText12",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_df_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_df_output",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Sales_ID as string,",
				"          SO_Date as string,",
				"          CustID as string,",
				"          Qty as string,",
				"          Value as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          CustomerID as string,",
				"          CustomerName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 assert(expectUnique(Sales_ID, false, 'SalesID'),",
				"     expectTrue(!isNull(toDate(SO_Date,'MM/dd/yyyy')), false, 'SalesDate'),",
				"     expectExists(CustID == CustomerID, false, 'Customer_ID')) ~> assert1",
				"derivedColumn1 filter(isError()==true()) ~> filter1",
				"assert1 filter(isError()==false()) ~> filter2",
				"assert1 derive({Error_Rows } = isError(),",
				"          Error_Description = case(hasError('SalesID')==true(),'SalesID Error its no unique', hasError('SalesDate')==true(),'SalesDate',hasError('Customer_ID')==true(),'Customer_ID')\r",
				") ~> derivedColumn1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CourseID as string,",
				"          CourseName as string,",
				"          StudentID as string",
				"     ),",
				"     partitionFileNames:['SalesInvalid.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CourseID as string,",
				"          CourseName as string,",
				"          StudentID as string",
				"     ),",
				"     partitionFileNames:['SalesValid.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}